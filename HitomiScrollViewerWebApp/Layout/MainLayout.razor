@using HitomiScrollViewerData
@using Microsoft.AspNetCore.SignalR.Client
@inherits LayoutComponentBase
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject ApiUrlService ApiUrlService

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudSnackbarProvider />
<MudDialogProvider MaxWidth="MaxWidth.Small" FullWidth="true" />

<MudLayout>
    @if (_isInitialized) {
        <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
            <MudText Typo="Typo.h5" Class="ml-3">Hitomi Scroll Viewer</MudText>
            <MudSpacer />
            <MudToggleIconButton @bind-Toggled="_isDarkMode"
            Color="Color.Inherit"
            Icon="@Icons.Material.Filled.LightMode"
            ToggledIcon="@Icons.Material.Filled.DarkMode" />
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <MudNavMenu>
                <MudNavLink Href="/search" Icon="@Icons.Material.Filled.Search">Search</MudNavLink>
                <MudNavLink Href="/browse" Icon="@Icons.Material.Filled.Folder">Browse</MudNavLink>
                <MudNavLink Href="/download" Icon="@Icons.Material.Filled.Download">Download</MudNavLink>
                <MudNavLink Href="/settings" Icon="@Icons.Material.Filled.Settings">Settings</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudMainContent Style="height: 100dvh">
            @Body
        </MudMainContent>
    } else {
        <div style="min-height: 100dvh; display: flex; justify-content: center; align-items: center;">
            <div style="display: flex; flex-direction: column; align-items: center;
                        justify-content: center; gap: 2dvh;">
                @if (_connectionError) {
                    <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Primary" Style="font-size: 4rem" />
                } else {
                    <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" Style="font-size: 4rem" />
                }
                <span>@_status</span>
            </div>
        </div>
    }
</MudLayout>

@code {
    private MudThemeProvider _mudThemeProvider = null!;
    private MudTheme _theme = new();
    private bool _isDarkMode;
    private bool _drawerOpen = true;

    private HubConnection? _hubConnection;
    private bool _isInitialized = false;
    private bool _connectionError = false;
    private string _status = "";

    private void DrawerToggle() => _drawerOpen = !_drawerOpen;

    protected override async Task OnInitializedAsync() {
        try {
            _status = "Connecting to local server...";
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(ApiUrlService.BaseUrl + "api/initialize")
                .Build();
            _hubConnection.On<InitStatus, int>("ReceiveStatus", UpdateStatus);
            await _hubConnection.StartAsync();
        } catch (HttpRequestException) {
            _connectionError = true;
            _status = "Connection error. Please reload after starting the local server.";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
        }
    }

    private async void UpdateStatus(InitStatus status, int progress) {
        switch (status) {
            case InitStatus.InProgress:
                _status = progress switch {
                    0 => "Adding tags...",
                    1 => "Adding gallery language and types...",
                    2 => "Adding query configurations...",
                    3 => "Adding gallery sorts...",
                    4 => "Adding example tag filters...",
                    _ => "Unknown status"
                };
                break;
            case InitStatus.Complete:
                _status = "Initialization complete";
                _isInitialized = true;
                if (_hubConnection is not null) {
                    await _hubConnection.DisposeAsync();
                }
                NavigationManager.NavigateTo("/search");
                break;
        }
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null) {
            await _hubConnection.DisposeAsync();
        }
    }
}